version: '3.8'

services:
  mcp-agent-tracker:
    build: .
    container_name: mcp-agent-tracker
    environment:
      - ENVIRONMENT=production
      - USER_ID=default_user
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_tracker
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mcp_tracker
      - POSTGRES_USER=mcp_user
      - POSTGRES_PASSWORD=mcp_password
      # Conversation tracking configuration
      - ENABLE_BACKGROUND_MONITORING=true
      - MONITORING_INTERVAL_SECONDS=300
      - ENABLE_AUTOMATIC_METADATA=true
      # Logging configuration
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/agent_tracker.log
      # Performance configuration
      - MAX_EXECUTION_TIME_MS=30000
      - BATCH_LOG_SIZE=100
    volumes:
      # Persistent data storage (for logs and other files)
      - mcp_data:/app/data
      # Optional: Mount logs directory
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    stdin_open: true
    tty: true
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'bash',
          '-c',
          'source .venv/bin/activate && python -c "from models import get_session_factory; get_session_factory()()"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mcp-server:
    build: .
    container_name: mcp-mcp-server
    ports:
      - '8000:8000' # Expose MCP server port
    environment:
      - ENVIRONMENT=production
      - USER_ID=default_user
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_tracker
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mcp_tracker
      - POSTGRES_USER=mcp_user
      - POSTGRES_PASSWORD=mcp_password
      # Conversation tracking configuration
      - ENABLE_BACKGROUND_MONITORING=true
      - MONITORING_INTERVAL_SECONDS=300
      - ENABLE_AUTOMATIC_METADATA=true
      # Logging configuration
      - LOG_LEVEL=INFO
      - LOG_FILE=/app/logs/agent_tracker.log
      # MCP configuration
      - MCP_TRANSPORT=http
    volumes:
      # Mount source code for development
      - .:/app
      # Mount logs for easy access
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: ['python', 'main.py']
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    environment:
      POSTGRES_DB: mcp_tracker
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    ports:
      - '5432:5432'
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U mcp_user -d mcp_tracker']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # Optional: Add pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mcp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mcp.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - '8080:80'
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

volumes:
  mcp_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: mcp-network
