#!/usr/bin/env python3
"""
Simple test for enhanced_chat function logic
"""

import sys
import os

# Add current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_enhanced_chat_logic():
    """Test the enhanced_chat function logic without MCP dependencies"""
    try:
        print("🧪 Testing enhanced_chat function logic...")
        
        # Mock the required functions and data
        def mock_get_session_factory():
            class MockSession:
                def __enter__(self):
                    return self
                def __exit__(self, *args):
                    pass
                def query(self, *args):
                    return self
                def order_by(self, *args):
                    return self
                def limit(self, *args):
                    return self
                def all(self):
                    return []
            return MockSession
        
        def mock_generate_conversation_summary(interactions):
            return "Mock conversation summary"
        
        def mock_extract_action_history(interactions):
            return "Mock action history"
        
        def mock_get_tech_stack_definition():
            return "Mock tech stack"
        
        def mock_get_project_plans():
            return "Mock project plans"
        
        def mock_get_user_preferences():
            return "Mock user preferences"
        
        def mock_get_agent_metadata():
            return "Mock agent metadata"
        
        def mock_build_enhanced_prompt(user_message, *args):
            return f"Mock enhanced context for: {user_message}"
        
        # Test the core logic
        test_message = "Hello, this is a test!"
        
        # Simulate the enhanced_chat logic
        try:
            # Get recent interactions for context
            with mock_get_session_factory()() as db_session:
                recent_interactions = db_session.query("AgentInteraction").order_by(
                    "timestamp"
                ).limit(20).all()
            
            # Generate context components
            conversation_summary = mock_generate_conversation_summary(recent_interactions)
            action_history = mock_extract_action_history(recent_interactions)
            tech_stack = mock_get_tech_stack_definition()
            project_plans = mock_get_project_plans()
            user_preferences = mock_get_user_preferences()
            agent_metadata = mock_get_agent_metadata()
            
            enhanced_context = mock_build_enhanced_prompt(
                test_message, conversation_summary, action_history, 
                tech_stack, project_plans, user_preferences, agent_metadata
            )
        except Exception as e:
            enhanced_context = f"⚠️ Context generation failed: {str(e)}"
        
        # Generate a context-aware response
        response = f"""
🚀 Enhanced Chat Response (Generated by Johny)

📝 User Message: {test_message}

✨ Context Enhancement: ✅ Automatically applied
📊 Conversation Context: ✅ Retrieved from database
🎯 Project Plans: ✅ Considered in response
⚙️ Tech Stack: ✅ Referenced for accuracy
👤 User Preferences: ✅ Applied to response

💡 Response: Based on your message about "{test_message}", I can see from our conversation history that we've been working on building a powerful prompt processor system. 

Your current project status shows:
- Conversation tracking system: ✅ Complete
- Context-aware prompt processing: ✅ Complete  
- Intelligent memory management: ✅ Complete
- Seamless prompt enhancement pipeline: 🚧 In Progress

Since you're asking about "{test_message}", I should consider your preference for simple yet powerful solutions and your focus on conversation context and memory.

Would you like me to help you with the next steps in implementing the automated pipeline, or do you have a different question about the system?

=== ENHANCED CONTEXT ===
{enhanced_context}
        """.strip()
        
        print(f"✅ Test successful!")
        print(f"📝 Input: {test_message}")
        print(f"🚀 Output length: {len(response)} characters")
        print(f"✨ Contains enhanced context: {'ENHANCED CONTEXT' in response}")
        print(f"🎯 Enhanced context: {enhanced_context}")
        
        return True
        
    except Exception as e:
        print(f"❌ Test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_enhanced_chat_logic()
    sys.exit(0 if success else 1)
